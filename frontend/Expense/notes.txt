function showPremiumUser(){
  const rzpButton = document.getElementById('rzp-button1');
  rzpButton.style.display = 'none';
  const addButton = document.getElementById('btn');
  addButton.style.display = 'block';
  addButton.style.width = '100%';
  document.getElementById('premium').innerHTML = "You Are A Premium User";
  
  }

function parseJwt(token) {
  var base64Url = token.split('.')[1];
  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
  var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {
    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(''));

  return JSON.parse(jsonPayload);
}


const decodeToken = parseJwt(token)
const ispremiumuser = decodeToken.ispremiumuser
  if(ispremiumuser === true){
    showLeaderboard();
    showPremiumUser();
      
}

document.getElementById('rzp-button1').onclick = async function (e) {
  try {
  const token  = localStorage.getItem('token')
  const response = await axios.get("http://localhost:3000/purchase/premiummembership", {headers: { "Authorization": token } })

var options = {
    "key": response.data.key_id,
    "order_id": response.data.orderDetailid,
    "handler": async function (response) {
      const res = axios.post("http://localhost:3000/purchase/updatetransactionstatus",{
            order_id: options.order_id,
            payment_id: response.razorpay_payment_id,
          },
          { headers: { "Authorization": token } })
          if (res.status === 201) {
              alert('You are a premium User Now');
            localStorage.setItem('token', res.data.token);
            showPremiumUser();
            showLeaderboard();
          } else {
            throw new Error('Failed to create expense');
          }
          
    },
  };


  const rzp1 = new Razorpay(options);
  rzp1.open();
  e.preventDefault();
  rzp1.on("payment.failed", function (responce) {
      console.log(responce)
      alert("something went wrong!!!")
  });
} catch (err) {
  console.error(err);
}
}
// document.addEventListener("DOMContentLoaded", (expenses) => {
//   addNewExpenseToUI(expenses);
//   document.getElementById("limitM").addEventListener("change", handleItemsPerPageChange);
//   fetchExpenses(currentPage, document.getElementById("limitM").value);
//   });

// Function to update the UI with the list of expenses